<template webc:root :id="uid" aria-label="Compare two images">
	<div class="slider">
		<label :for="uid + '-slider'" class="visually-hidden"></label>
		<input type="range" :name="name" :value="value" :aria-controls="uid" :id="uid + '-slider'">
	</div>
	<slot>Donâ€™t forget the images!</slot>
</template>

<style webc:scoped>
:host input[type='range'] {
	width: 100%;
  -webkit-appearance: none; /* Override default look */
  height: 8px; /* Adjust height as needed */
  background: #d3d3d3; /* Default track color */
  outline: none; /* Remove outline */
  border-radius: 4px; /* Rounded corners */
  height: 8px; /* Adjust height as needed */
  background: transparent; /* Default track color */
  outline: none; /* Remove outline */
  border-radius: 4px; /* Rounded corners */
}

/* Thumb styles */
:host input[type='range']::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 30px; /* Adjust thumb size */
  height: 30px;
  background: #257480; /* Thumb color */
  cursor: pointer;
  border-radius: 50%; /* Make it round */
}

:host input[type='range']::-moz-range-thumb {
  width: 24px; /* Adjust thumb size */
  height: 24px;
  background: #257480; /* Thumb color */
  cursor: pointer;
  border-radius: 50%; /* Make it round */
  border: none; /* Remove border if any */
}
:host {
	display: grid;
	position: relative;
	max-width: 40em;
	aspect-ratio: 16 / 10;
}
:host [disabled] {
	cursor: not-allowed;
}
:host input[type='range'] {
	width: 100%;
}
:host .slider,
:host img {
	display: block;
	width: 100%;
	object-fit: cover;
}
:host .slider {
	z-index: 2;
	height: 100%;
	display: flex;
	align-items: center;
	position: absolute;
	top: 0;
}
:host picture:first-child img {
	z-index: 1;
	clip-path: inset(0 0 0 var(--position));
}
:host img {
	position: absolute;
}
:host .visually-hidden {
	overflow: hidden;
	position: absolute;
	white-space: nowrap;
	width: 1px;
	height: 1px;
}
</style>

<style @html="`#${uid} { --position: ${value}%; }`"></style>

<script>
customElements.define("image-compare", class extends HTMLElement {
	connectedCallback() {
		this.range = this.querySelector(":scope input[type='range']");
		this.range.addEventListener("input", (e) => this.oninput(e.target.value));

		// Synchronize the value if it changed before JS
		this.oninput(this.range.value);
	}

	oninput(value) {
		requestAnimationFrame(() => {
			this.style.setProperty("--position", `${value}%`);
		});
	}
})
</script>
